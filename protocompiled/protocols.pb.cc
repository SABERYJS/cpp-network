// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocols.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* GetTimeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTimeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTimeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTimeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocols_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocols_2eproto() {
  protobuf_AddDesc_protocols_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocols.proto");
  GOOGLE_CHECK(file != NULL);
  GetTimeReq_descriptor_ = file->message_type(0);
  static const int GetTimeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeReq, ctime_),
  };
  GetTimeReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTimeReq_descriptor_,
      GetTimeReq::default_instance_,
      GetTimeReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetTimeReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeReq, _is_default_instance_));
  GetTimeResp_descriptor_ = file->message_type(1);
  static const int GetTimeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResp, time_),
  };
  GetTimeResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTimeResp_descriptor_,
      GetTimeResp::default_instance_,
      GetTimeResp_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetTimeResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResp, _is_default_instance_));
  RequestAuth_descriptor_ = file->message_type(2);
  static const int RequestAuth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuth, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuth, password_),
  };
  RequestAuth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestAuth_descriptor_,
      RequestAuth::default_instance_,
      RequestAuth_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestAuth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuth, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuth, _is_default_instance_));
  SendChatMsg_descriptor_ = file->message_type(3);
  static const int SendChatMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, picurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, videourl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, voiceurl_),
  };
  SendChatMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendChatMsg_descriptor_,
      SendChatMsg::default_instance_,
      SendChatMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendChatMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChatMsg, _is_default_instance_));
  Message_descriptor_ = file->message_type(4);
  static const int Message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, rauth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, smsg_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      -1,
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _is_default_instance_));
  ChatMsgType_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocols_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTimeReq_descriptor_, &GetTimeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTimeResp_descriptor_, &GetTimeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestAuth_descriptor_, &RequestAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendChatMsg_descriptor_, &SendChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocols_2eproto() {
  delete GetTimeReq::default_instance_;
  delete GetTimeReq_reflection_;
  delete GetTimeResp::default_instance_;
  delete GetTimeResp_reflection_;
  delete RequestAuth::default_instance_;
  delete RequestAuth_reflection_;
  delete SendChatMsg::default_instance_;
  delete SendChatMsg_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_protocols_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocols_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017protocols.proto\022\003rpc\"\033\n\nGetTimeReq\022\r\n\005"
    "cTime\030\001 \001(\003\"(\n\013GetTimeResp\022\013\n\003ret\030\001 \001(\005\022"
    "\014\n\004time\030\002 \001(\003\",\n\013RequestAuth\022\013\n\003uid\030\001 \001("
    "\005\022\020\n\010password\030\002 \001(\t\"\200\001\n\013SendChatMsg\022\014\n\004p"
    "eer\030\001 \001(\005\022!\n\007msgType\030\002 \001(\0162\020.rpc.ChatMsg"
    "Type\022\016\n\006picUrl\030\003 \001(\t\022\014\n\004text\030\004 \001(\t\022\020\n\010vi"
    "deoUrl\030\005 \001(\t\022\020\n\010voiceUrl\030\006 \001(\t\"k\n\007Messag"
    "e\022\037\n\005mType\030\001 \001(\0162\020.rpc.MessageType\022\037\n\005rA"
    "uth\030\002 \001(\0132\020.rpc.RequestAuth\022\036\n\004sMsg\030\003 \001("
    "\0132\020.rpc.SendChatMsg*b\n\013ChatMsgType\022\022\n\016Ch"
    "atMsgTypePic\020\000\022\023\n\017ChatMsgTypeText\020\001\022\024\n\020C"
    "hatMsgTypeVideo\020\002\022\024\n\020ChatMsgTypeVoice\020\003*"
    ":\n\013MessageType\022\023\n\017MessageTypeAuth\020\000\022\026\n\022M"
    "essageTypeChatMsg\020\001B%Z#martinye.com/micr"
    "o/common/proto/rpcb\006proto3", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocols.proto", &protobuf_RegisterTypes);
  GetTimeReq::default_instance_ = new GetTimeReq();
  GetTimeResp::default_instance_ = new GetTimeResp();
  RequestAuth::default_instance_ = new RequestAuth();
  SendChatMsg::default_instance_ = new SendChatMsg();
  Message::default_instance_ = new Message();
  GetTimeReq::default_instance_->InitAsDefaultInstance();
  GetTimeResp::default_instance_->InitAsDefaultInstance();
  RequestAuth::default_instance_->InitAsDefaultInstance();
  SendChatMsg::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocols_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocols_2eproto {
  StaticDescriptorInitializer_protocols_2eproto() {
    protobuf_AddDesc_protocols_2eproto();
  }
} static_descriptor_initializer_protocols_2eproto_;
const ::google::protobuf::EnumDescriptor* ChatMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgType_descriptor_;
}
bool ChatMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTimeReq::kCTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTimeReq::GetTimeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetTimeReq)
}

void GetTimeReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetTimeReq::GetTimeReq(const GetTimeReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetTimeReq)
}

void GetTimeReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ctime_ = GOOGLE_LONGLONG(0);
}

GetTimeReq::~GetTimeReq() {
  // @@protoc_insertion_point(destructor:rpc.GetTimeReq)
  SharedDtor();
}

void GetTimeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTimeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTimeReq_descriptor_;
}

const GetTimeReq& GetTimeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocols_2eproto();
  return *default_instance_;
}

GetTimeReq* GetTimeReq::default_instance_ = NULL;

GetTimeReq* GetTimeReq::New(::google::protobuf::Arena* arena) const {
  GetTimeReq* n = new GetTimeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.GetTimeReq)
  ctime_ = GOOGLE_LONGLONG(0);
}

bool GetTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetTimeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetTimeReq)
  return false;
#undef DO_
}

void GetTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetTimeReq)
  // optional int64 cTime = 1;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ctime(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.GetTimeReq)
}

::google::protobuf::uint8* GetTimeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetTimeReq)
  // optional int64 cTime = 1;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ctime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetTimeReq)
  return target;
}

int GetTimeReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.GetTimeReq)
  int total_size = 0;

  // optional int64 cTime = 1;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTimeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.GetTimeReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetTimeReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTimeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.GetTimeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.GetTimeReq)
    MergeFrom(*source);
  }
}

void GetTimeReq::MergeFrom(const GetTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.GetTimeReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
}

void GetTimeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.GetTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeReq::CopyFrom(const GetTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.GetTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeReq::IsInitialized() const {

  return true;
}

void GetTimeReq::Swap(GetTimeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTimeReq::InternalSwap(GetTimeReq* other) {
  std::swap(ctime_, other->ctime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTimeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTimeReq_descriptor_;
  metadata.reflection = GetTimeReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTimeReq

// optional int64 cTime = 1;
void GetTimeReq::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetTimeReq::ctime() const {
  // @@protoc_insertion_point(field_get:rpc.GetTimeReq.cTime)
  return ctime_;
}
 void GetTimeReq::set_ctime(::google::protobuf::int64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:rpc.GetTimeReq.cTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTimeResp::kRetFieldNumber;
const int GetTimeResp::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTimeResp::GetTimeResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.GetTimeResp)
}

void GetTimeResp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetTimeResp::GetTimeResp(const GetTimeResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.GetTimeResp)
}

void GetTimeResp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ret_ = 0;
  time_ = GOOGLE_LONGLONG(0);
}

GetTimeResp::~GetTimeResp() {
  // @@protoc_insertion_point(destructor:rpc.GetTimeResp)
  SharedDtor();
}

void GetTimeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTimeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTimeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTimeResp_descriptor_;
}

const GetTimeResp& GetTimeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocols_2eproto();
  return *default_instance_;
}

GetTimeResp* GetTimeResp::default_instance_ = NULL;

GetTimeResp* GetTimeResp::New(::google::protobuf::Arena* arena) const {
  GetTimeResp* n = new GetTimeResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTimeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.GetTimeResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetTimeResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetTimeResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, ret_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetTimeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.GetTimeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.GetTimeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.GetTimeResp)
  return false;
#undef DO_
}

void GetTimeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.GetTimeResp)
  // optional int32 ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.GetTimeResp)
}

::google::protobuf::uint8* GetTimeResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.GetTimeResp)
  // optional int32 ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.GetTimeResp)
  return target;
}

int GetTimeResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.GetTimeResp)
  int total_size = 0;

  // optional int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTimeResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.GetTimeResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetTimeResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTimeResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.GetTimeResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.GetTimeResp)
    MergeFrom(*source);
  }
}

void GetTimeResp::MergeFrom(const GetTimeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.GetTimeResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void GetTimeResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.GetTimeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeResp::CopyFrom(const GetTimeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.GetTimeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeResp::IsInitialized() const {

  return true;
}

void GetTimeResp::Swap(GetTimeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTimeResp::InternalSwap(GetTimeResp* other) {
  std::swap(ret_, other->ret_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTimeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTimeResp_descriptor_;
  metadata.reflection = GetTimeResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTimeResp

// optional int32 ret = 1;
void GetTimeResp::clear_ret() {
  ret_ = 0;
}
 ::google::protobuf::int32 GetTimeResp::ret() const {
  // @@protoc_insertion_point(field_get:rpc.GetTimeResp.ret)
  return ret_;
}
 void GetTimeResp::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:rpc.GetTimeResp.ret)
}

// optional int64 time = 2;
void GetTimeResp::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetTimeResp::time() const {
  // @@protoc_insertion_point(field_get:rpc.GetTimeResp.time)
  return time_;
}
 void GetTimeResp::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:rpc.GetTimeResp.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestAuth::kUidFieldNumber;
const int RequestAuth::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAuth::RequestAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.RequestAuth)
}

void RequestAuth::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestAuth::RequestAuth(const RequestAuth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.RequestAuth)
}

void RequestAuth::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestAuth::~RequestAuth() {
  // @@protoc_insertion_point(destructor:rpc.RequestAuth)
  SharedDtor();
}

void RequestAuth::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAuth_descriptor_;
}

const RequestAuth& RequestAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocols_2eproto();
  return *default_instance_;
}

RequestAuth* RequestAuth::default_instance_ = NULL;

RequestAuth* RequestAuth::New(::google::protobuf::Arena* arena) const {
  RequestAuth* n = new RequestAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RequestAuth)
  uid_ = 0;
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.RequestAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.RequestAuth.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.RequestAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.RequestAuth)
  return false;
#undef DO_
}

void RequestAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.RequestAuth)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.RequestAuth.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.RequestAuth)
}

::google::protobuf::uint8* RequestAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RequestAuth)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.RequestAuth.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.RequestAuth)
  return target;
}

int RequestAuth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RequestAuth)
  int total_size = 0;

  // optional int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.RequestAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestAuth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.RequestAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.RequestAuth)
    MergeFrom(*source);
  }
}

void RequestAuth::MergeFrom(const RequestAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.RequestAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void RequestAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.RequestAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAuth::CopyFrom(const RequestAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RequestAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAuth::IsInitialized() const {

  return true;
}

void RequestAuth::Swap(RequestAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAuth::InternalSwap(RequestAuth* other) {
  std::swap(uid_, other->uid_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAuth_descriptor_;
  metadata.reflection = RequestAuth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestAuth

// optional int32 uid = 1;
void RequestAuth::clear_uid() {
  uid_ = 0;
}
 ::google::protobuf::int32 RequestAuth::uid() const {
  // @@protoc_insertion_point(field_get:rpc.RequestAuth.uid)
  return uid_;
}
 void RequestAuth::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:rpc.RequestAuth.uid)
}

// optional string password = 2;
void RequestAuth::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestAuth::password() const {
  // @@protoc_insertion_point(field_get:rpc.RequestAuth.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestAuth::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RequestAuth.password)
}
 void RequestAuth::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RequestAuth.password)
}
 void RequestAuth::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RequestAuth.password)
}
 ::std::string* RequestAuth::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RequestAuth.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestAuth::release_password() {
  // @@protoc_insertion_point(field_release:rpc.RequestAuth.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestAuth::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:rpc.RequestAuth.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendChatMsg::kPeerFieldNumber;
const int SendChatMsg::kMsgTypeFieldNumber;
const int SendChatMsg::kPicUrlFieldNumber;
const int SendChatMsg::kTextFieldNumber;
const int SendChatMsg::kVideoUrlFieldNumber;
const int SendChatMsg::kVoiceUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendChatMsg::SendChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.SendChatMsg)
}

void SendChatMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SendChatMsg::SendChatMsg(const SendChatMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.SendChatMsg)
}

void SendChatMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  peer_ = 0;
  msgtype_ = 0;
  picurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videourl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voiceurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SendChatMsg::~SendChatMsg() {
  // @@protoc_insertion_point(destructor:rpc.SendChatMsg)
  SharedDtor();
}

void SendChatMsg::SharedDtor() {
  picurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videourl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voiceurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendChatMsg_descriptor_;
}

const SendChatMsg& SendChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocols_2eproto();
  return *default_instance_;
}

SendChatMsg* SendChatMsg::default_instance_ = NULL;

SendChatMsg* SendChatMsg::New(::google::protobuf::Arena* arena) const {
  SendChatMsg* n = new SendChatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.SendChatMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SendChatMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SendChatMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(peer_, msgtype_);
  picurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voiceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SendChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.SendChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 peer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional .rpc.ChatMsgType msgType = 2;
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::rpc::ChatMsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_picUrl;
        break;
      }

      // optional string picUrl = 3;
      case 3: {
        if (tag == 26) {
         parse_picUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->picurl().data(), this->picurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.SendChatMsg.picUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.SendChatMsg.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_videoUrl;
        break;
      }

      // optional string videoUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_videoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videourl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->videourl().data(), this->videourl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.SendChatMsg.videoUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voiceUrl;
        break;
      }

      // optional string voiceUrl = 6;
      case 6: {
        if (tag == 50) {
         parse_voiceUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiceurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->voiceurl().data(), this->voiceurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rpc.SendChatMsg.voiceUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.SendChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.SendChatMsg)
  return false;
#undef DO_
}

void SendChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.SendChatMsg)
  // optional int32 peer = 1;
  if (this->peer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peer(), output);
  }

  // optional .rpc.ChatMsgType msgType = 2;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional string picUrl = 3;
  if (this->picurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.picUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->picurl(), output);
  }

  // optional string text = 4;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional string videoUrl = 5;
  if (this->videourl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->videourl().data(), this->videourl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.videoUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->videourl(), output);
  }

  // optional string voiceUrl = 6;
  if (this->voiceurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.voiceUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->voiceurl(), output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.SendChatMsg)
}

::google::protobuf::uint8* SendChatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.SendChatMsg)
  // optional int32 peer = 1;
  if (this->peer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peer(), target);
  }

  // optional .rpc.ChatMsgType msgType = 2;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional string picUrl = 3;
  if (this->picurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.picUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->picurl(), target);
  }

  // optional string text = 4;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional string videoUrl = 5;
  if (this->videourl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->videourl().data(), this->videourl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.videoUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->videourl(), target);
  }

  // optional string voiceUrl = 6;
  if (this->voiceurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rpc.SendChatMsg.voiceUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->voiceurl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.SendChatMsg)
  return target;
}

int SendChatMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.SendChatMsg)
  int total_size = 0;

  // optional int32 peer = 1;
  if (this->peer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer());
  }

  // optional .rpc.ChatMsgType msgType = 2;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  // optional string picUrl = 3;
  if (this->picurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->picurl());
  }

  // optional string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional string videoUrl = 5;
  if (this->videourl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videourl());
  }

  // optional string voiceUrl = 6;
  if (this->voiceurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->voiceurl());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.SendChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SendChatMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendChatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.SendChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.SendChatMsg)
    MergeFrom(*source);
  }
}

void SendChatMsg::MergeFrom(const SendChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.SendChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.peer() != 0) {
    set_peer(from.peer());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
  if (from.picurl().size() > 0) {

    picurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picurl_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.videourl().size() > 0) {

    videourl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videourl_);
  }
  if (from.voiceurl().size() > 0) {

    voiceurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voiceurl_);
  }
}

void SendChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.SendChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendChatMsg::CopyFrom(const SendChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.SendChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatMsg::IsInitialized() const {

  return true;
}

void SendChatMsg::Swap(SendChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendChatMsg::InternalSwap(SendChatMsg* other) {
  std::swap(peer_, other->peer_);
  std::swap(msgtype_, other->msgtype_);
  picurl_.Swap(&other->picurl_);
  text_.Swap(&other->text_);
  videourl_.Swap(&other->videourl_);
  voiceurl_.Swap(&other->voiceurl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendChatMsg_descriptor_;
  metadata.reflection = SendChatMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendChatMsg

// optional int32 peer = 1;
void SendChatMsg::clear_peer() {
  peer_ = 0;
}
 ::google::protobuf::int32 SendChatMsg::peer() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.peer)
  return peer_;
}
 void SendChatMsg::set_peer(::google::protobuf::int32 value) {
  
  peer_ = value;
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.peer)
}

// optional .rpc.ChatMsgType msgType = 2;
void SendChatMsg::clear_msgtype() {
  msgtype_ = 0;
}
 ::rpc::ChatMsgType SendChatMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.msgType)
  return static_cast< ::rpc::ChatMsgType >(msgtype_);
}
 void SendChatMsg::set_msgtype(::rpc::ChatMsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.msgType)
}

// optional string picUrl = 3;
void SendChatMsg::clear_picurl() {
  picurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendChatMsg::picurl() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.picUrl)
  return picurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_picurl(const ::std::string& value) {
  
  picurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.picUrl)
}
 void SendChatMsg::set_picurl(const char* value) {
  
  picurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.picUrl)
}
 void SendChatMsg::set_picurl(const char* value, size_t size) {
  
  picurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.picUrl)
}
 ::std::string* SendChatMsg::mutable_picurl() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.picUrl)
  return picurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendChatMsg::release_picurl() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.picUrl)
  
  return picurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_allocated_picurl(::std::string* picurl) {
  if (picurl != NULL) {
    
  } else {
    
  }
  picurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picurl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.picUrl)
}

// optional string text = 4;
void SendChatMsg::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendChatMsg::text() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.text)
}
 void SendChatMsg::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.text)
}
 void SendChatMsg::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.text)
}
 ::std::string* SendChatMsg::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendChatMsg::release_text() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.text)
}

// optional string videoUrl = 5;
void SendChatMsg::clear_videourl() {
  videourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendChatMsg::videourl() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.videoUrl)
  return videourl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_videourl(const ::std::string& value) {
  
  videourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.videoUrl)
}
 void SendChatMsg::set_videourl(const char* value) {
  
  videourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.videoUrl)
}
 void SendChatMsg::set_videourl(const char* value, size_t size) {
  
  videourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.videoUrl)
}
 ::std::string* SendChatMsg::mutable_videourl() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.videoUrl)
  return videourl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendChatMsg::release_videourl() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.videoUrl)
  
  return videourl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_allocated_videourl(::std::string* videourl) {
  if (videourl != NULL) {
    
  } else {
    
  }
  videourl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videourl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.videoUrl)
}

// optional string voiceUrl = 6;
void SendChatMsg::clear_voiceurl() {
  voiceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendChatMsg::voiceurl() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.voiceUrl)
  return voiceurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_voiceurl(const ::std::string& value) {
  
  voiceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.voiceUrl)
}
 void SendChatMsg::set_voiceurl(const char* value) {
  
  voiceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.voiceUrl)
}
 void SendChatMsg::set_voiceurl(const char* value, size_t size) {
  
  voiceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.voiceUrl)
}
 ::std::string* SendChatMsg::mutable_voiceurl() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.voiceUrl)
  return voiceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendChatMsg::release_voiceurl() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.voiceUrl)
  
  return voiceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendChatMsg::set_allocated_voiceurl(::std::string* voiceurl) {
  if (voiceurl != NULL) {
    
  } else {
    
  }
  voiceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voiceurl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.voiceUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMTypeFieldNumber;
const int Message::kRAuthFieldNumber;
const int Message::kSMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.Message)
}

void Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rauth_ = const_cast< ::rpc::RequestAuth*>(&::rpc::RequestAuth::default_instance());
  smsg_ = const_cast< ::rpc::SendChatMsg*>(&::rpc::SendChatMsg::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.Message)
}

void Message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mtype_ = 0;
  rauth_ = NULL;
  smsg_ = NULL;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:rpc.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete rauth_;
    delete smsg_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocols_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.Message)
  mtype_ = 0;
  if (GetArenaNoVirtual() == NULL && rauth_ != NULL) delete rauth_;
  rauth_ = NULL;
  if (GetArenaNoVirtual() == NULL && smsg_ != NULL) delete smsg_;
  smsg_ = NULL;
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.MessageType mType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mtype(static_cast< ::rpc::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rAuth;
        break;
      }

      // optional .rpc.RequestAuth rAuth = 2;
      case 2: {
        if (tag == 18) {
         parse_rAuth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rauth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsg;
        break;
      }

      // optional .rpc.SendChatMsg sMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.Message)
  // optional .rpc.MessageType mType = 1;
  if (this->mtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mtype(), output);
  }

  // optional .rpc.RequestAuth rAuth = 2;
  if (this->has_rauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rauth_, output);
  }

  // optional .rpc.SendChatMsg sMsg = 3;
  if (this->has_smsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->smsg_, output);
  }

  // @@protoc_insertion_point(serialize_end:rpc.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.Message)
  // optional .rpc.MessageType mType = 1;
  if (this->mtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mtype(), target);
  }

  // optional .rpc.RequestAuth rAuth = 2;
  if (this->has_rauth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rauth_, false, target);
  }

  // optional .rpc.SendChatMsg sMsg = 3;
  if (this->has_smsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->smsg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rpc.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.Message)
  int total_size = 0;

  // optional .rpc.MessageType mType = 1;
  if (this->mtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mtype());
  }

  // optional .rpc.RequestAuth rAuth = 2;
  if (this->has_rauth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rauth_);
  }

  // optional .rpc.SendChatMsg sMsg = 3;
  if (this->has_smsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->smsg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpc.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mtype() != 0) {
    set_mtype(from.mtype());
  }
  if (from.has_rauth()) {
    mutable_rauth()->::rpc::RequestAuth::MergeFrom(from.rauth());
  }
  if (from.has_smsg()) {
    mutable_smsg()->::rpc::SendChatMsg::MergeFrom(from.smsg());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpc.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(mtype_, other->mtype_);
  std::swap(rauth_, other->rauth_);
  std::swap(smsg_, other->smsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .rpc.MessageType mType = 1;
void Message::clear_mtype() {
  mtype_ = 0;
}
 ::rpc::MessageType Message::mtype() const {
  // @@protoc_insertion_point(field_get:rpc.Message.mType)
  return static_cast< ::rpc::MessageType >(mtype_);
}
 void Message::set_mtype(::rpc::MessageType value) {
  
  mtype_ = value;
  // @@protoc_insertion_point(field_set:rpc.Message.mType)
}

// optional .rpc.RequestAuth rAuth = 2;
bool Message::has_rauth() const {
  return !_is_default_instance_ && rauth_ != NULL;
}
void Message::clear_rauth() {
  if (GetArenaNoVirtual() == NULL && rauth_ != NULL) delete rauth_;
  rauth_ = NULL;
}
const ::rpc::RequestAuth& Message::rauth() const {
  // @@protoc_insertion_point(field_get:rpc.Message.rAuth)
  return rauth_ != NULL ? *rauth_ : *default_instance_->rauth_;
}
::rpc::RequestAuth* Message::mutable_rauth() {
  
  if (rauth_ == NULL) {
    rauth_ = new ::rpc::RequestAuth;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Message.rAuth)
  return rauth_;
}
::rpc::RequestAuth* Message::release_rauth() {
  // @@protoc_insertion_point(field_release:rpc.Message.rAuth)
  
  ::rpc::RequestAuth* temp = rauth_;
  rauth_ = NULL;
  return temp;
}
void Message::set_allocated_rauth(::rpc::RequestAuth* rauth) {
  delete rauth_;
  rauth_ = rauth;
  if (rauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Message.rAuth)
}

// optional .rpc.SendChatMsg sMsg = 3;
bool Message::has_smsg() const {
  return !_is_default_instance_ && smsg_ != NULL;
}
void Message::clear_smsg() {
  if (GetArenaNoVirtual() == NULL && smsg_ != NULL) delete smsg_;
  smsg_ = NULL;
}
const ::rpc::SendChatMsg& Message::smsg() const {
  // @@protoc_insertion_point(field_get:rpc.Message.sMsg)
  return smsg_ != NULL ? *smsg_ : *default_instance_->smsg_;
}
::rpc::SendChatMsg* Message::mutable_smsg() {
  
  if (smsg_ == NULL) {
    smsg_ = new ::rpc::SendChatMsg;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Message.sMsg)
  return smsg_;
}
::rpc::SendChatMsg* Message::release_smsg() {
  // @@protoc_insertion_point(field_release:rpc.Message.sMsg)
  
  ::rpc::SendChatMsg* temp = smsg_;
  smsg_ = NULL;
  return temp;
}
void Message::set_allocated_smsg(::rpc::SendChatMsg* smsg) {
  delete smsg_;
  smsg_ = smsg;
  if (smsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Message.sMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
