// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols.proto

#ifndef PROTOBUF_protocols_2eproto__INCLUDED
#define PROTOBUF_protocols_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_protocols_2eproto();
void protobuf_AssignDesc_protocols_2eproto();
void protobuf_ShutdownFile_protocols_2eproto();

class GetTimeReq;
class GetTimeResp;
class Message;
class RequestAuth;
class SendChatMsg;

enum ChatMsgType {
  ChatMsgTypePic = 0,
  ChatMsgTypeText = 1,
  ChatMsgTypeVideo = 2,
  ChatMsgTypeVoice = 3,
  ChatMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatMsgType_IsValid(int value);
const ChatMsgType ChatMsgType_MIN = ChatMsgTypePic;
const ChatMsgType ChatMsgType_MAX = ChatMsgTypeVoice;
const int ChatMsgType_ARRAYSIZE = ChatMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMsgType_descriptor();
inline const ::std::string& ChatMsgType_Name(ChatMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMsgType_descriptor(), value);
}
inline bool ChatMsgType_Parse(
    const ::std::string& name, ChatMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMsgType>(
    ChatMsgType_descriptor(), name, value);
}
enum MessageType {
  MessageTypeAuth = 0,
  MessageTypeChatMsg = 1,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MessageTypeAuth;
const MessageType MessageType_MAX = MessageTypeChatMsg;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class GetTimeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.GetTimeReq) */ {
 public:
  GetTimeReq();
  virtual ~GetTimeReq();

  GetTimeReq(const GetTimeReq& from);

  inline GetTimeReq& operator=(const GetTimeReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTimeReq& default_instance();

  void Swap(GetTimeReq* other);

  // implements Message ----------------------------------------------

  inline GetTimeReq* New() const { return New(NULL); }

  GetTimeReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTimeReq& from);
  void MergeFrom(const GetTimeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTimeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 cTime = 1;
  void clear_ctime();
  static const int kCTimeFieldNumber = 1;
  ::google::protobuf::int64 ctime() const;
  void set_ctime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.GetTimeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 ctime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocols_2eproto();
  friend void protobuf_AssignDesc_protocols_2eproto();
  friend void protobuf_ShutdownFile_protocols_2eproto();

  void InitAsDefaultInstance();
  static GetTimeReq* default_instance_;
};
// -------------------------------------------------------------------

class GetTimeResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.GetTimeResp) */ {
 public:
  GetTimeResp();
  virtual ~GetTimeResp();

  GetTimeResp(const GetTimeResp& from);

  inline GetTimeResp& operator=(const GetTimeResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTimeResp& default_instance();

  void Swap(GetTimeResp* other);

  // implements Message ----------------------------------------------

  inline GetTimeResp* New() const { return New(NULL); }

  GetTimeResp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTimeResp& from);
  void MergeFrom(const GetTimeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTimeResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.GetTimeResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 ret_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocols_2eproto();
  friend void protobuf_AssignDesc_protocols_2eproto();
  friend void protobuf_ShutdownFile_protocols_2eproto();

  void InitAsDefaultInstance();
  static GetTimeResp* default_instance_;
};
// -------------------------------------------------------------------

class RequestAuth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RequestAuth) */ {
 public:
  RequestAuth();
  virtual ~RequestAuth();

  RequestAuth(const RequestAuth& from);

  inline RequestAuth& operator=(const RequestAuth& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestAuth& default_instance();

  void Swap(RequestAuth* other);

  // implements Message ----------------------------------------------

  inline RequestAuth* New() const { return New(NULL); }

  RequestAuth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestAuth& from);
  void MergeFrom(const RequestAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:rpc.RequestAuth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 uid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocols_2eproto();
  friend void protobuf_AssignDesc_protocols_2eproto();
  friend void protobuf_ShutdownFile_protocols_2eproto();

  void InitAsDefaultInstance();
  static RequestAuth* default_instance_;
};
// -------------------------------------------------------------------

class SendChatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.SendChatMsg) */ {
 public:
  SendChatMsg();
  virtual ~SendChatMsg();

  SendChatMsg(const SendChatMsg& from);

  inline SendChatMsg& operator=(const SendChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendChatMsg& default_instance();

  void Swap(SendChatMsg* other);

  // implements Message ----------------------------------------------

  inline SendChatMsg* New() const { return New(NULL); }

  SendChatMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendChatMsg& from);
  void MergeFrom(const SendChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendChatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 peer = 1;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  ::google::protobuf::int32 peer() const;
  void set_peer(::google::protobuf::int32 value);

  // optional .rpc.ChatMsgType msgType = 2;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  ::rpc::ChatMsgType msgtype() const;
  void set_msgtype(::rpc::ChatMsgType value);

  // optional string picUrl = 3;
  void clear_picurl();
  static const int kPicUrlFieldNumber = 3;
  const ::std::string& picurl() const;
  void set_picurl(const ::std::string& value);
  void set_picurl(const char* value);
  void set_picurl(const char* value, size_t size);
  ::std::string* mutable_picurl();
  ::std::string* release_picurl();
  void set_allocated_picurl(::std::string* picurl);

  // optional string text = 4;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string videoUrl = 5;
  void clear_videourl();
  static const int kVideoUrlFieldNumber = 5;
  const ::std::string& videourl() const;
  void set_videourl(const ::std::string& value);
  void set_videourl(const char* value);
  void set_videourl(const char* value, size_t size);
  ::std::string* mutable_videourl();
  ::std::string* release_videourl();
  void set_allocated_videourl(::std::string* videourl);

  // optional string voiceUrl = 6;
  void clear_voiceurl();
  static const int kVoiceUrlFieldNumber = 6;
  const ::std::string& voiceurl() const;
  void set_voiceurl(const ::std::string& value);
  void set_voiceurl(const char* value);
  void set_voiceurl(const char* value, size_t size);
  ::std::string* mutable_voiceurl();
  ::std::string* release_voiceurl();
  void set_allocated_voiceurl(::std::string* voiceurl);

  // @@protoc_insertion_point(class_scope:rpc.SendChatMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 peer_;
  int msgtype_;
  ::google::protobuf::internal::ArenaStringPtr picurl_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr videourl_;
  ::google::protobuf::internal::ArenaStringPtr voiceurl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocols_2eproto();
  friend void protobuf_AssignDesc_protocols_2eproto();
  friend void protobuf_ShutdownFile_protocols_2eproto();

  void InitAsDefaultInstance();
  static SendChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.MessageType mType = 1;
  void clear_mtype();
  static const int kMTypeFieldNumber = 1;
  ::rpc::MessageType mtype() const;
  void set_mtype(::rpc::MessageType value);

  // optional .rpc.RequestAuth rAuth = 2;
  bool has_rauth() const;
  void clear_rauth();
  static const int kRAuthFieldNumber = 2;
  const ::rpc::RequestAuth& rauth() const;
  ::rpc::RequestAuth* mutable_rauth();
  ::rpc::RequestAuth* release_rauth();
  void set_allocated_rauth(::rpc::RequestAuth* rauth);

  // optional .rpc.SendChatMsg sMsg = 3;
  bool has_smsg() const;
  void clear_smsg();
  static const int kSMsgFieldNumber = 3;
  const ::rpc::SendChatMsg& smsg() const;
  ::rpc::SendChatMsg* mutable_smsg();
  ::rpc::SendChatMsg* release_smsg();
  void set_allocated_smsg(::rpc::SendChatMsg* smsg);

  // @@protoc_insertion_point(class_scope:rpc.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::rpc::RequestAuth* rauth_;
  ::rpc::SendChatMsg* smsg_;
  int mtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocols_2eproto();
  friend void protobuf_AssignDesc_protocols_2eproto();
  friend void protobuf_ShutdownFile_protocols_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTimeReq

// optional int64 cTime = 1;
inline void GetTimeReq::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetTimeReq::ctime() const {
  // @@protoc_insertion_point(field_get:rpc.GetTimeReq.cTime)
  return ctime_;
}
inline void GetTimeReq::set_ctime(::google::protobuf::int64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:rpc.GetTimeReq.cTime)
}

// -------------------------------------------------------------------

// GetTimeResp

// optional int32 ret = 1;
inline void GetTimeResp::clear_ret() {
  ret_ = 0;
}
inline ::google::protobuf::int32 GetTimeResp::ret() const {
  // @@protoc_insertion_point(field_get:rpc.GetTimeResp.ret)
  return ret_;
}
inline void GetTimeResp::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:rpc.GetTimeResp.ret)
}

// optional int64 time = 2;
inline void GetTimeResp::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetTimeResp::time() const {
  // @@protoc_insertion_point(field_get:rpc.GetTimeResp.time)
  return time_;
}
inline void GetTimeResp::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:rpc.GetTimeResp.time)
}

// -------------------------------------------------------------------

// RequestAuth

// optional int32 uid = 1;
inline void RequestAuth::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 RequestAuth::uid() const {
  // @@protoc_insertion_point(field_get:rpc.RequestAuth.uid)
  return uid_;
}
inline void RequestAuth::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:rpc.RequestAuth.uid)
}

// optional string password = 2;
inline void RequestAuth::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestAuth::password() const {
  // @@protoc_insertion_point(field_get:rpc.RequestAuth.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestAuth::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RequestAuth.password)
}
inline void RequestAuth::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RequestAuth.password)
}
inline void RequestAuth::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RequestAuth.password)
}
inline ::std::string* RequestAuth::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RequestAuth.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestAuth::release_password() {
  // @@protoc_insertion_point(field_release:rpc.RequestAuth.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestAuth::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:rpc.RequestAuth.password)
}

// -------------------------------------------------------------------

// SendChatMsg

// optional int32 peer = 1;
inline void SendChatMsg::clear_peer() {
  peer_ = 0;
}
inline ::google::protobuf::int32 SendChatMsg::peer() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.peer)
  return peer_;
}
inline void SendChatMsg::set_peer(::google::protobuf::int32 value) {
  
  peer_ = value;
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.peer)
}

// optional .rpc.ChatMsgType msgType = 2;
inline void SendChatMsg::clear_msgtype() {
  msgtype_ = 0;
}
inline ::rpc::ChatMsgType SendChatMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.msgType)
  return static_cast< ::rpc::ChatMsgType >(msgtype_);
}
inline void SendChatMsg::set_msgtype(::rpc::ChatMsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.msgType)
}

// optional string picUrl = 3;
inline void SendChatMsg::clear_picurl() {
  picurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendChatMsg::picurl() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.picUrl)
  return picurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_picurl(const ::std::string& value) {
  
  picurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.picUrl)
}
inline void SendChatMsg::set_picurl(const char* value) {
  
  picurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.picUrl)
}
inline void SendChatMsg::set_picurl(const char* value, size_t size) {
  
  picurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.picUrl)
}
inline ::std::string* SendChatMsg::mutable_picurl() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.picUrl)
  return picurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendChatMsg::release_picurl() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.picUrl)
  
  return picurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_allocated_picurl(::std::string* picurl) {
  if (picurl != NULL) {
    
  } else {
    
  }
  picurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picurl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.picUrl)
}

// optional string text = 4;
inline void SendChatMsg::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendChatMsg::text() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.text)
}
inline void SendChatMsg::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.text)
}
inline void SendChatMsg::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.text)
}
inline ::std::string* SendChatMsg::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendChatMsg::release_text() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.text)
}

// optional string videoUrl = 5;
inline void SendChatMsg::clear_videourl() {
  videourl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendChatMsg::videourl() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.videoUrl)
  return videourl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_videourl(const ::std::string& value) {
  
  videourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.videoUrl)
}
inline void SendChatMsg::set_videourl(const char* value) {
  
  videourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.videoUrl)
}
inline void SendChatMsg::set_videourl(const char* value, size_t size) {
  
  videourl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.videoUrl)
}
inline ::std::string* SendChatMsg::mutable_videourl() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.videoUrl)
  return videourl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendChatMsg::release_videourl() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.videoUrl)
  
  return videourl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_allocated_videourl(::std::string* videourl) {
  if (videourl != NULL) {
    
  } else {
    
  }
  videourl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videourl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.videoUrl)
}

// optional string voiceUrl = 6;
inline void SendChatMsg::clear_voiceurl() {
  voiceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendChatMsg::voiceurl() const {
  // @@protoc_insertion_point(field_get:rpc.SendChatMsg.voiceUrl)
  return voiceurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_voiceurl(const ::std::string& value) {
  
  voiceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.SendChatMsg.voiceUrl)
}
inline void SendChatMsg::set_voiceurl(const char* value) {
  
  voiceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.SendChatMsg.voiceUrl)
}
inline void SendChatMsg::set_voiceurl(const char* value, size_t size) {
  
  voiceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.SendChatMsg.voiceUrl)
}
inline ::std::string* SendChatMsg::mutable_voiceurl() {
  
  // @@protoc_insertion_point(field_mutable:rpc.SendChatMsg.voiceUrl)
  return voiceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendChatMsg::release_voiceurl() {
  // @@protoc_insertion_point(field_release:rpc.SendChatMsg.voiceUrl)
  
  return voiceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendChatMsg::set_allocated_voiceurl(::std::string* voiceurl) {
  if (voiceurl != NULL) {
    
  } else {
    
  }
  voiceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voiceurl);
  // @@protoc_insertion_point(field_set_allocated:rpc.SendChatMsg.voiceUrl)
}

// -------------------------------------------------------------------

// Message

// optional .rpc.MessageType mType = 1;
inline void Message::clear_mtype() {
  mtype_ = 0;
}
inline ::rpc::MessageType Message::mtype() const {
  // @@protoc_insertion_point(field_get:rpc.Message.mType)
  return static_cast< ::rpc::MessageType >(mtype_);
}
inline void Message::set_mtype(::rpc::MessageType value) {
  
  mtype_ = value;
  // @@protoc_insertion_point(field_set:rpc.Message.mType)
}

// optional .rpc.RequestAuth rAuth = 2;
inline bool Message::has_rauth() const {
  return !_is_default_instance_ && rauth_ != NULL;
}
inline void Message::clear_rauth() {
  if (GetArenaNoVirtual() == NULL && rauth_ != NULL) delete rauth_;
  rauth_ = NULL;
}
inline const ::rpc::RequestAuth& Message::rauth() const {
  // @@protoc_insertion_point(field_get:rpc.Message.rAuth)
  return rauth_ != NULL ? *rauth_ : *default_instance_->rauth_;
}
inline ::rpc::RequestAuth* Message::mutable_rauth() {
  
  if (rauth_ == NULL) {
    rauth_ = new ::rpc::RequestAuth;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Message.rAuth)
  return rauth_;
}
inline ::rpc::RequestAuth* Message::release_rauth() {
  // @@protoc_insertion_point(field_release:rpc.Message.rAuth)
  
  ::rpc::RequestAuth* temp = rauth_;
  rauth_ = NULL;
  return temp;
}
inline void Message::set_allocated_rauth(::rpc::RequestAuth* rauth) {
  delete rauth_;
  rauth_ = rauth;
  if (rauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Message.rAuth)
}

// optional .rpc.SendChatMsg sMsg = 3;
inline bool Message::has_smsg() const {
  return !_is_default_instance_ && smsg_ != NULL;
}
inline void Message::clear_smsg() {
  if (GetArenaNoVirtual() == NULL && smsg_ != NULL) delete smsg_;
  smsg_ = NULL;
}
inline const ::rpc::SendChatMsg& Message::smsg() const {
  // @@protoc_insertion_point(field_get:rpc.Message.sMsg)
  return smsg_ != NULL ? *smsg_ : *default_instance_->smsg_;
}
inline ::rpc::SendChatMsg* Message::mutable_smsg() {
  
  if (smsg_ == NULL) {
    smsg_ = new ::rpc::SendChatMsg;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Message.sMsg)
  return smsg_;
}
inline ::rpc::SendChatMsg* Message::release_smsg() {
  // @@protoc_insertion_point(field_release:rpc.Message.sMsg)
  
  ::rpc::SendChatMsg* temp = smsg_;
  smsg_ = NULL;
  return temp;
}
inline void Message::set_allocated_smsg(::rpc::SendChatMsg* smsg) {
  delete smsg_;
  smsg_ = smsg;
  if (smsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Message.sMsg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpc::ChatMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::ChatMsgType>() {
  return ::rpc::ChatMsgType_descriptor();
}
template <> struct is_proto_enum< ::rpc::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::MessageType>() {
  return ::rpc::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocols_2eproto__INCLUDED
